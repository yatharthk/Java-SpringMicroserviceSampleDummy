spring.application.name=currency-exchange
server.port=8000


spring.config.import=optional:configserver:http://localhost:8888
spring.config.cloud.name=currency-exchange

spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true
spring.jpa.defer-datasource-initialization=true

#since we added eureka-client-dependency in it would typically be picked up automatically,
#but if not it's better to use this property to find and register itself.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.hostname=localhost



#configuration for circuitBreakerRetryer
resilience4j.retry.instances.sample-api-endpoint.maxAttempts=4
resilience4j.retry.instances.sample-api-endpoint.waitDuration=2s
#there is another property that is generally used exponential backoff
#working. ->1st attempt to reach service =waitDuration defined.
# then next attempt is taken after exponential of the previous wait duration.
resilience4j.retry.instances.sample-api-endpoint.enableExponentialBackoff=true

#Implementing rate limiter :: desired number of request to allow in some duration.
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s


#These 2 are needed for tracing
#1. for SB2 using zipkin and brave
#spring.sleuth.sampler.probability=1.0
#2. for Sb3 using micrometer and otel #sb3
management.tracing.sampling.probability=1.0

#This remains same for both
logging.pattern.level = %5p [${spring.application.name:},%X{traceId:-}, %X{spanId:-}]
